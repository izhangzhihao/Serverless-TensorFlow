# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-tensorflow
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: Allow
    Action:
      - s3:*
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - ${self:provider.environment.BUCKET}
          - "/*"

environment:
  BUCKET: serverless-tensorflow

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  upload:
    handler: upload.uploadHandler
    timeout: 30
    events:
      - http:
          path: upload
          method: post
  train:
    handler: train.trainHandler
    timeout: 30
    memory: 3008
    events:
      - http:
          path: train
          method: post
          async: true
  infer:
    handler: infer.inferHandler
    timeout: 30
    events:
      - http:
          path: infer
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    SageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-tensorflow
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

package:
  exclude:
    - "**"
  include:
    - "**.py"

custom:
  pythonRequirements:
    zip: true
    slim: true
    noDeploy:
      - boto3
      - botocore
      - google-auth
      - google-auth-oauthlib
      - google-pasta
      - Markdown
      - oauthlib
      - protobuf
      - scipy
      - docutils
      - jmespath
      - pip
      - python-dateutil
      - setuptools
      - six
      - tensorboard
